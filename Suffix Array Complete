#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define MAX 250052
#define GetI() (SA12[t] < n0 ? SA12[t] * 3 + 1 : (SA12[t] - n0) * 3 + 2)
string str;

ll s[MAX],SA[MAX],c[MAX],lcp[MAX],ra[MAX],n;   // SA stores suffixes indexs in sorted order


inline bool leq(ll a1, ll a2, ll b1, ll b2)
{
        return(a1 < b1 || (a1 == b1 && a2 <= b2));
}

inline bool leq(ll a1, ll a2, ll a3, ll b1, ll b2, ll b3)
{
        return(a1 < b1 || (a1 == b1 && leq(a2,a3, b2,b3)));
}

static void radixPass(ll* a, ll* b, ll* r, ll n, ll K)
{
        ll i, sum, t;
        for(i = 0;  i <= K;  i++) c[i] = 0;
        for(i = 0;  i < n;  i++) c[r[a[i]]]++;
        for(i = 0, sum = 0;  i <= K;  i++) {
                t = c[i];
                c[i] = sum;
                sum += t;
        }
        for(i = 0;  i < n;  i++) b[c[r[a[i]]]++] = a[i];
}

void suffixArray(ll* s, ll* SA, ll n, ll K)
{
        ll n0 = (n+2)/3, n1 = (n+1)/3, n2 = n/3, n02 = n0+n2;
        ll* s12 = new ll[n02 + 3];
        ll* SA12 = new ll[n02 + 3];
        ll* s0 = new ll[n0];
        ll* SA0 = new ll[n0];
        ll i, j, name, c0, c1, c2, p, t, k;
        s12[n02] = s12[n02+1] = s12[n02+2] = 0;
        SA12[n02] = SA12[n02+1] = SA12[n02+2] = 0;
        for(i=0, j=0; i < n+(n0-n1); i++) if(i%3 != 0) s12[j++] = i;
        radixPass(s12, SA12, s+2, n02, K);
        radixPass(SA12, s12, s+1, n02, K);
        radixPass(s12, SA12, s, n02, K);
        name = 0, c0 = -1, c1 = -1, c2 = -1;
        for(i = 0; i < n02; i++) {
                if(s[SA12[i]] != c0 || s[SA12[i]+1] != c1 || s[SA12[i]+2] != c2) {
                        name++;
                        c0 = s[SA12[i]];
                        c1 = s[SA12[i]+1];
                        c2 = s[SA12[i]+2];
                }
                if(SA12[i] % 3 == 1) s12[SA12[i]/3] = name;
                else s12[SA12[i]/3 + n0] = name;
        }
        if(name < n02) {
                suffixArray(s12, SA12, n02, name);
                for(i = 0; i < n02; i++) s12[SA12[i]] = i + 1;
        }
        else for(i = 0; i < n02; i++) SA12[s12[i] - 1] = i;
        for(i=0, j=0; i < n02; i++) if(SA12[i] < n0) s0[j++] = 3*SA12[i];
        radixPass(s0, SA0, s, n0, K);
        for(p=0, t=n0-n1, k=0; k < n; k++) {
                i = GetI();
                j = SA0[p];
                if(SA12[t] < n0 ? leq(s[i], s12[SA12[t] + n0], s[j], s12[j/3]) : leq(s[i], s[i+1], s12[SA12[t]-n0+1], s[j], s[j+1], s12[j/3+n0])) {
                        SA[k] = i; t++;
                        if(t == n02) for(k++; p < n0; p++, k++) SA[k] = SA0[p];
                }
                else {
                        SA[k] = j; p++;
                        if(p == n0) for(k++; t < n02; t++, k++) SA[k] = GetI();
                }
        }
        delete[] s12; delete[] SA12; delete[] SA0; delete[] s0;
}

void constructlcp()    // Constructs LCP using Kasai's Algorithm in O(n)
{
    memset(lcp,0,sizeof(lcp));
    memset(ra,0,sizeof(ra));
    ll i,j,k;

    for(int i=0; i<n; i++) ra[SA[i]]=i;

    for(i=0,k=0;i<n;i++,k?k--:0)
    {
        if(ra[i]==n-1) {k=0; continue;}
        j=SA[ra[i]+1];
        while(i+k<n && j+k<n && s[i+k]==s[j+k]) k++;
        lcp[ra[i]]=k;       // lcp[i] contains lcp b/w i-1 and i
    }
}

int main()
{
        ll m, i;
        cin>>str;
        m = -1;
        for(i = 0; str[i]; i++)
        {
                s[i] = str[i];
                m = m > str[i]? m : str[i];
        }
        n = i;
        for(i = n; i < n+3; i++) SA[i] = s[i] = 0;
        suffixArray(s, SA, n, m);
        constructlcp();
        for(i = 0; i < n; i++) cout<<SA[i]<<endl;
        return 0;
}
